"""
AgentÊï∞ÊçÆËÆøÈóÆÂ±Ç
Agent Repository
"""

import uuid
from typing import Optional, Dict, Any, List
from loguru import logger

from ..base import BaseRepository
from ...models.agent import Agent, AgentCreate, AgentUpdate
from ...utils.helpers import now_utc


class AgentRepository(BaseRepository[Agent]):
    """AgentÊï∞ÊçÆËÆøÈóÆÂ±Ç"""
    
    def __init__(self):
        super().__init__("agent")
    
    async def create_agent(self, agent_data: AgentCreate) -> Optional[Dict[str, Any]]:
        """ÂàõÂª∫Agent"""
        try:
            # Ê£ÄÊü•AgentÂêçÁß∞ÊòØÂê¶Â∑≤Â≠òÂú®
            if await self.agent_name_exists(agent_data.agent_name):
                raise ValueError(f"AgentÂêçÁß∞ '{agent_data.agent_name}' Â∑≤Â≠òÂú®")

            # ÂáÜÂ§áÊï∞ÊçÆ
            data = {
                "agent_id": uuid.uuid4(),
                "agent_name": agent_data.agent_name,
                "description": agent_data.description,
                "base_url": agent_data.base_url,
                "api_key": agent_data.api_key,
                "model_name": agent_data.model_name,
                "tool_config": agent_data.tool_config,
                "parameters": agent_data.parameters,
                "is_autonomous": agent_data.is_autonomous,
                "tags": agent_data.tags,  # Ê∑ªÂä†tagsÂ≠óÊÆµÊîØÊåÅ
                "created_at": now_utc(),
                "updated_at": now_utc(),
                "is_deleted": False
            }

            result = await self.create(data)
            return result
        except Exception as e:
            logger.error(f"ÂàõÂª∫AgentÂ§±Ë¥•: {e}")
            raise
    
    async def get_agent_by_id(self, agent_id: uuid.UUID) -> Optional[Dict[str, Any]]:
        """Ê†πÊçÆIDËé∑ÂèñAgent"""
        logger.info(f"üî• [AGENT-READ] ÂºÄÂßãËØªÂèñAgent: {agent_id}")

        result = await self.get_by_id(agent_id, "agent_id")

        logger.info(f"üî• [AGENT-READ] ‰ªéÊï∞ÊçÆÂ∫ìËØªÂèñÁöÑÂéüÂßãÊï∞ÊçÆ: {result}")

        if result:
            # Ëß£ÊûêJSONÂ≠óÊÆµ
            result = self._parse_json_fields(result)
            logger.info(f"üî• [AGENT-READ] Ëß£ÊûêJSONÂ≠óÊÆµÂêéÁöÑÊï∞ÊçÆ: {result}")
            logger.info(f"üî• [AGENT-READ] ÊúÄÁªàtagsÂ≠óÊÆµ: {result.get('tags')}")

        return result
    
    def _parse_json_fields(self, agent_data: Dict[str, Any]) -> Dict[str, Any]:
        """Ëß£ÊûêAgentÊï∞ÊçÆ‰∏≠ÁöÑJSONÂ≠óÊÆµ"""
        import json

        logger.info(f"üî• [JSON-PARSE] ÂºÄÂßãËß£ÊûêJSONÂ≠óÊÆµÔºåÂéüÂßãÊï∞ÊçÆ: {agent_data}")

        # Ëß£ÊûêJSONÂ≠óÊÆµ
        json_fields = ['tool_config', 'parameters', 'capabilities', 'tags']
        for field in json_fields:
            if field in agent_data and agent_data[field]:
                logger.info(f"üî• [JSON-PARSE] Â§ÑÁêÜÂ≠óÊÆµ {field}, ÂéüÂßãÂÄº: {agent_data[field]}, Á±ªÂûã: {type(agent_data[field])}")
                if isinstance(agent_data[field], str):
                    try:
                        parsed_value = json.loads(agent_data[field])
                        agent_data[field] = parsed_value
                        logger.info(f"üî• [JSON-PARSE] {field} Ëß£ÊûêÊàêÂäü: {parsed_value}")
                    except (json.JSONDecodeError, ValueError) as e:
                        logger.error(f"üî• [JSON-PARSE] {field} Ëß£ÊûêÂ§±Ë¥•: {e}")
                        # Â¶ÇÊûúËß£ÊûêÂ§±Ë¥•ÔºåËÆæ‰∏∫ÈªòËÆ§ÂÄº
                        if field in ['capabilities', 'tags']:
                            agent_data[field] = []
                        else:
                            agent_data[field] = {}
                        logger.info(f"üî• [JSON-PARSE] {field} ËÆæÁΩÆ‰∏∫ÈªòËÆ§ÂÄº: {agent_data[field]}")

        # Á°Æ‰øùÂøÖË¶ÅÂ≠óÊÆµÂ≠òÂú®‰∏î‰∏∫Ê≠£Á°ÆÁ±ªÂûã
        if 'tool_config' not in agent_data or not isinstance(agent_data['tool_config'], dict):
            agent_data['tool_config'] = {}
            logger.info(f"üî• [JSON-PARSE] tool_config ËÆæÁΩÆ‰∏∫ÈªòËÆ§ÂÄº: {{}}")
        if 'parameters' not in agent_data or not isinstance(agent_data['parameters'], dict):
            agent_data['parameters'] = {}
            logger.info(f"üî• [JSON-PARSE] parameters ËÆæÁΩÆ‰∏∫ÈªòËÆ§ÂÄº: {{}}")
        if 'capabilities' not in agent_data or not isinstance(agent_data['capabilities'], list):
            agent_data['capabilities'] = []
            logger.info(f"üî• [JSON-PARSE] capabilities ËÆæÁΩÆ‰∏∫ÈªòËÆ§ÂÄº: []")
        if 'tags' not in agent_data or not isinstance(agent_data['tags'], list):
            agent_data['tags'] = []
            logger.info(f"üî• [JSON-PARSE] tags ËÆæÁΩÆ‰∏∫ÈªòËÆ§ÂÄº: []")

        logger.info(f"üî• [JSON-PARSE] ÊúÄÁªàËß£ÊûêÁªìÊûú: {agent_data}")
        logger.info(f"üî• [JSON-PARSE] ÊúÄÁªàtagsÂÄº: {agent_data.get('tags')}")

        return agent_data
    
    async def get_agent_by_name(self, agent_name: str) -> Optional[Dict[str, Any]]:
        """Ê†πÊçÆÂêçÁß∞Ëé∑ÂèñAgent"""
        try:
            query = "SELECT * FROM agent WHERE agent_name = $1 AND is_deleted = FALSE"
            result = await self.db.fetch_one(query, agent_name)
            if result:
                result = self._parse_json_fields(result)
            return result
        except Exception as e:
            logger.error(f"Ê†πÊçÆÂêçÁß∞Ëé∑ÂèñAgentÂ§±Ë¥•: {e}")
            raise
    
    async def update_agent(self, agent_id: uuid.UUID, agent_data: AgentUpdate) -> Optional[Dict[str, Any]]:
        """Êõ¥Êñ∞Agent"""
        try:
            logger.info(f"üî• [AGENT-UPDATE] ÂºÄÂßãÊõ¥Êñ∞Agent: {agent_id}")
            logger.info(f"üî• [AGENT-UPDATE] ÂéüÂßãÊõ¥Êñ∞Êï∞ÊçÆ: {agent_data.model_dump(exclude_unset=True)}")

            # Ê£ÄÊü•AgentÊòØÂê¶Â≠òÂú®
            existing_agent = await self.get_by_id(agent_id, "agent_id")
            if not existing_agent:
                raise ValueError(f"Agent {agent_id} ‰∏çÂ≠òÂú®")

            logger.info(f"üî• [AGENT-UPDATE] Áé∞ÊúâAgentÊï∞ÊçÆ: {existing_agent}")

            # ÂáÜÂ§áÊõ¥Êñ∞Êï∞ÊçÆ
            update_data = {}

            if agent_data.agent_name is not None:
                if agent_data.agent_name != existing_agent['agent_name']:
                    if await self.agent_name_exists(agent_data.agent_name):
                        raise ValueError(f"AgentÂêçÁß∞ '{agent_data.agent_name}' Â∑≤Â≠òÂú®")
                update_data["agent_name"] = agent_data.agent_name

            # ÂÖ∂‰ªñÂ≠óÊÆµ
            for field in ['description', 'base_url', 'api_key', 'model_name',
                         'tool_config', 'parameters', 'is_autonomous', 'tags']:
                value = getattr(agent_data, field, None)
                if value is not None:
                    update_data[field] = value
                    if field == 'tags':
                        logger.info(f"üî• [AGENT-UPDATE] ÂáÜÂ§áÊõ¥Êñ∞tags: {value}")

            if not update_data:
                return existing_agent

            logger.info(f"üî• [AGENT-UPDATE] ÊûÑÂª∫ÁöÑÊõ¥Êñ∞Êï∞ÊçÆ: {update_data}")

            result = await self.update(agent_id, update_data, "agent_id")

            logger.info(f"üî• [AGENT-UPDATE] Êõ¥Êñ∞Êìç‰ΩúËøîÂõûÁªìÊûú: {result}")

            # ÈáçÊñ∞ËØªÂèñÊï∞ÊçÆÈ™åËØÅ
            verification_agent = await self.get_by_id(agent_id, "agent_id")
            logger.info(f"üî• [AGENT-UPDATE] È™åËØÅËØªÂèñAgentÊï∞ÊçÆ: {verification_agent}")

            return result
        except Exception as e:
            logger.error(f"Êõ¥Êñ∞AgentÂ§±Ë¥•: {e}")
            import traceback
            logger.error(f"ÈîôËØØÂ†ÜÊ†à: {traceback.format_exc()}")
            raise
    
    async def delete_agent(self, agent_id: uuid.UUID, soft_delete: bool = True) -> bool:
        """Âà†Èô§Agent"""
        return await self.delete(agent_id, "agent_id", soft_delete)
    
    async def agent_name_exists(self, agent_name: str) -> bool:
        """Ê£ÄÊü•AgentÂêçÁß∞ÊòØÂê¶Â≠òÂú®"""
        return await self.exists({"agent_name": agent_name})
    
    async def get_agents_by_model(self, model_name: str) -> List[Dict[str, Any]]:
        """Ê†πÊçÆÊ®°ÂûãÂêçÁß∞Ëé∑ÂèñAgentÂàóË°®"""
        try:
            query = """
                SELECT * FROM agent 
                WHERE model_name = $1 AND is_deleted = FALSE 
                ORDER BY created_at DESC
            """
            results = await self.db.fetch_all(query, model_name)
            return results
        except Exception as e:
            logger.error(f"Ê†πÊçÆÊ®°ÂûãÂêçÁß∞Ëé∑ÂèñAgentÂàóË°®Â§±Ë¥•: {e}")
            raise
    
    async def get_autonomous_agents(self) -> List[Dict[str, Any]]:
        """Ëé∑ÂèñËá™‰∏ªËøêË°åÁöÑAgentÂàóË°®"""
        try:
            query = """
                SELECT * FROM agent 
                WHERE is_autonomous = TRUE AND is_deleted = FALSE 
                ORDER BY created_at DESC
            """
            results = await self.db.fetch_all(query)
            return results
        except Exception as e:
            logger.error(f"Ëé∑ÂèñËá™‰∏ªËøêË°åAgentÂàóË°®Â§±Ë¥•: {e}")
            raise
    
    async def search_agents(self, keyword: str, limit: int = 50) -> List[Dict[str, Any]]:
        """ÊêúÁ¥¢Agent"""
        try:
            query = """
                SELECT * FROM agent 
                WHERE (agent_name ILIKE $1 OR description ILIKE $1 OR model_name ILIKE $1) 
                      AND is_deleted = FALSE 
                ORDER BY created_at DESC 
                LIMIT $2
            """
            keyword_pattern = f"%{keyword}%"
            results = await self.db.fetch_all(query, keyword_pattern, limit)
            return results
        except Exception as e:
            logger.error(f"ÊêúÁ¥¢AgentÂ§±Ë¥•: {e}")
            raise
    
    async def update_agent_config(self, agent_id: uuid.UUID, 
                                 tool_config: Optional[Dict[str, Any]] = None,
                                 parameters: Optional[Dict[str, Any]] = None) -> Optional[Dict[str, Any]]:
        """Êõ¥Êñ∞AgentÈÖçÁΩÆ"""
        try:
            update_data = {}
            if tool_config is not None:
                update_data["tool_config"] = tool_config
            if parameters is not None:
                update_data["parameters"] = parameters
            
            if not update_data:
                return await self.get_agent_by_id(agent_id)
            
            result = await self.update(agent_id, update_data, "agent_id")
            return result
        except Exception as e:
            logger.error(f"Êõ¥Êñ∞AgentÈÖçÁΩÆÂ§±Ë¥•: {e}")
            raise
    
    async def get_agents_stats(self) -> Dict[str, Any]:
        """Ëé∑ÂèñAgentÁªüËÆ°‰ø°ÊÅØ"""
        try:
            query = """
                SELECT 
                    COUNT(*) as total_agents,
                    COUNT(CASE WHEN is_autonomous THEN 1 END) as autonomous_agents,
                    COUNT(CASE WHEN NOT is_autonomous THEN 1 END) as manual_agents,
                    COUNT(DISTINCT model_name) as unique_models
                FROM agent 
                WHERE is_deleted = FALSE
            """
            result = await self.db.fetch_one(query)
            return result
        except Exception as e:
            logger.error(f"Ëé∑ÂèñAgentÁªüËÆ°‰ø°ÊÅØÂ§±Ë¥•: {e}")
            raise
    
    async def validate_agent_connection(self, agent_id: uuid.UUID) -> bool:
        """È™åËØÅAgentËøûÊé•ÔºàËøôÈáåÂè™ÊòØÁ§∫‰æãÔºåÂÆûÈôÖÂÆûÁé∞ÈúÄË¶ÅÊ†πÊçÆÂÖ∑‰ΩìÁöÑAgent APIËøõË°åÈ™åËØÅÔºâ"""
        try:
            agent = await self.get_agent_by_id(agent_id)
            if not agent:
                return False
            
            # ËøôÈáåÂ∫îËØ•ÂÆûÁé∞ÂÆûÈôÖÁöÑAgentËøûÊé•È™åËØÅÈÄªËæë
            # ‰æãÂ¶ÇË∞ÉÁî®AgentÁöÑÂÅ•Â∫∑Ê£ÄÊü•API
            # ÁõÆÂâçÂè™ËøîÂõûTrue‰Ωú‰∏∫Á§∫‰æã
            return True
        except Exception as e:
            logger.error(f"È™åËØÅAgentËøûÊé•Â§±Ë¥•: {e}")
            return False
    
    async def get_all_active_agents(self, limit: int = 100) -> List[Dict[str, Any]]:
        """Ëé∑ÂèñÊâÄÊúâÊøÄÊ¥ªAgent"""
        try:
            logger.info(f"üî• [GET-ALL-AGENTS] ÂºÄÂßãËé∑ÂèñÊâÄÊúâÊøÄÊ¥ªAgentÔºåÈôêÂà∂: {limit}")

            query = """
                SELECT agent_id, agent_name, description, base_url, api_key,
                       model_name, tool_config, parameters, is_autonomous,
                       tags, created_at, updated_at, is_deleted
                FROM agent
                WHERE is_deleted = FALSE
                ORDER BY created_at DESC
                LIMIT $1
            """
            results = await self.db.fetch_all(query, limit)

            logger.info(f"üî• [GET-ALL-AGENTS] Êü•ËØ¢Âà∞ {len(results)} ‰∏™Agent")

            # Ëß£ÊûêJSONÂ≠óÊÆµÂπ∂Ê∑ªÂä†ÂÖºÂÆπÊÄßÂ≠óÊÆµ
            processed_results = []
            for result in results:
                logger.info(f"üî• [GET-ALL-AGENTS] Â§ÑÁêÜAgent: {result.get('agent_name')}")
                logger.info(f"üî• [GET-ALL-AGENTS] ÂéüÂßãtagsÂÄº: {result.get('tags')}")

                # Ëß£ÊûêJSONÂ≠óÊÆµ
                parsed_result = self._parse_json_fields(dict(result))

                # Ê∑ªÂä†ÂÖºÂÆπÊÄßÂ≠óÊÆµ
                parsed_result['status'] = True  # ÈªòËÆ§‰∏∫ÊøÄÊ¥ªÁä∂ÊÄÅ

                logger.info(f"üî• [GET-ALL-AGENTS] Ëß£ÊûêÂêétagsÂÄº: {parsed_result.get('tags')}")
                processed_results.append(parsed_result)

            logger.info(f"üî• [GET-ALL-AGENTS] ËøîÂõû {len(processed_results)} ‰∏™Â§ÑÁêÜÂêéÁöÑAgent")
            return processed_results
        except Exception as e:
            logger.error(f"Ëé∑ÂèñÊâÄÊúâÊøÄÊ¥ªAgentÂ§±Ë¥•: {e}")
            import traceback
            logger.error(f"ÈîôËØØÂ†ÜÊ†à: {traceback.format_exc()}")
            raise