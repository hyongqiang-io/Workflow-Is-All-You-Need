{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(ss:*)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -m pytest test_comprehensive_suite.py::TestComprehensiveDataAccessLayer::test_complete_workflow_lifecycle -v -s)",
      "Bash(grep:*)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -m pytest test_simple_connection.py -v -s)",
      "Bash(ls:*)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe check_environment.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe simple_db_test.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe test_config_loading.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/bin/python tests/check_environment.py)",
      "Bash(python3:*)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe tests/check_environment.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -m pytest tests/unit/test_user_repository.py -v)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -m pytest tests/test_comprehensive_suite.py -v)",
      "Bash(find:*)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe workflow_framework/scripts/init_database.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe tests/simple_db_test.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe tests/check_tables.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe tests/debug_user_query.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe tests/test_user_creation.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe tests/test_exact_sql.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -m pytest tests/test_comprehensive_suite.py::TestComprehensiveDataAccessLayer::test_complete_workflow_lifecycle -v)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe tests/check_processor_table.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe tests/fix_processor_table.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -m pytest tests/test_comprehensive_suite.py::TestComprehensiveDataAccessLayer::test_complete_workflow_lifecycle -v --tb=short)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -m pytest tests/test_comprehensive_suite.py -v --tb=short)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -m pytest tests/test_comprehensive_suite.py::TestComprehensiveDataAccessLayer::test_complete_workflow_lifecycle -v --tb=line)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe tests/check_node_table.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe tests/check_node_view.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe tests/add_execution_tables.py)",
      "Bash(cp:*)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -m pip install pytest pytest-asyncio pytest-cov)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"\nimport asyncpg\nimport asyncio\n\nasync def check_tables():\n    conn = await asyncpg.connect(\n        host=''127.0.0.1'', port=5432, database=''workflow_db'',\n        user=''postgres'', password=''postgresql''\n    )\n    \n    # 检查表是否存在\n    tables = await conn.fetch(''''''\n        SELECT table_name \n        FROM information_schema.tables \n        WHERE table_schema = ''public'' \n        ORDER BY table_name\n    '''''')\n    \n    print(''Existing tables:'')\n    for table in tables:\n        print(f''  - {table[0]}'')\n    \n    await conn.close()\n\nasyncio.run(check_tables())\n\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -m pip install httpx)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe simple_test.py)",
      "Bash(pkill:*)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe test_workflow_api.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe simple_test.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe complete_test.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe enhanced_test.py)",
      "Bash(touch:*)",
      "Bash(python:*)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe comprehensive_test.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe /mnt/d/HuaweiMoveData/Users/Dr.Tom_Great/Desktop/final/execution_test.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe execution_test.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe simple_execution_test.py)",
      "Bash(\"/mnt/c/Program Files/PostgreSQL/17/bin/psql.exe\" -h localhost -U postgres -d workflow_db -f update_execution_schema.sql)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe update_schema.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe final_schema_fix.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"\nimport asyncio\nimport sys\nimport os\nsys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))\nfrom workflow_framework.utils.database import db_manager\n\nasync def add_instance_name():\n    await db_manager.initialize()\n    await db_manager.execute(''ALTER TABLE workflow_instance ADD COLUMN IF NOT EXISTS instance_name VARCHAR(255)'')\n    await db_manager.execute(''UPDATE workflow_instance SET instance_name = workflow_instance_name WHERE instance_name IS NULL'')\n    print(''[OK] Added instance_name field'')\n    await db_manager.close()\n\nasyncio.run(add_instance_name())\n\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe add_instance_name.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe comprehensive_schema_fix.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"\nimport sys, os\nsys.path.insert(0, os.getcwd())\nfrom workflow_framework.repositories.node.node_repository import NodeRepository\n\nrepo = NodeRepository()\nprint(''Available methods:'', [m for m in dir(repo) if not m.startswith(''_'')])\nprint(''Has get_workflow_connections:'', hasattr(repo, ''get_workflow_connections''))\n\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"\nimport importlib\nimport sys, os\nsys.path.insert(0, os.getcwd())\nfrom workflow_framework.repositories.node import node_repository\nimportlib.reload(node_repository)\nfrom workflow_framework.repositories.node.node_repository import NodeRepository\n\nrepo = NodeRepository()\nprint(''Methods after reload:'', [m for m in dir(repo) if ''connection'' in m.lower()])\n\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"\nimport sys, os\nsys.path.insert(0, os.getcwd())\nfrom workflow_framework.repositories.node.node_repository import NodeRepository\n\nrepo = NodeRepository()\nprint(''NodeRepository methods with connection:'', [m for m in dir(repo) if ''connection'' in m.lower()])\nprint(''Has get_workflow_connections:'', hasattr(repo, ''get_workflow_connections''))\n\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -m py_compile /mnt/d/HuaweiMoveData/Users/Dr.Tom_Great/Desktop/final/workflow_framework/repositories/node/node_repository.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -m py_compile workflow_framework/repositories/node/node_repository.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"\nimport sys\nimport importlib\nsys.path.insert(0, ''.'')\n\n# Force reload the module\nif ''workflow_framework.repositories.node.node_repository'' in sys.modules:\n    importlib.reload(sys.modules[''workflow_framework.repositories.node.node_repository''])\n\nfrom workflow_framework.repositories.node.node_repository import NodeRepository\nrepo = NodeRepository()\nprint(''Available methods:'', [m for m in dir(repo) if not m.startswith(''__'') and ''get_'' in m])\n\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"\nimport sys\nsys.path.insert(0, ''.'')\nfrom workflow_framework.repositories.processor.processor_repository import ProcessorRepository\nrepo = ProcessorRepository()\nprint(''ProcessorRepository methods:'', [m for m in dir(repo) if ''get_processors'' in m])\nprint(''Has get_processors_by_node:'', hasattr(repo, ''get_processors_by_node''))\n\")",
      "Bash(true)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -m py_compile workflow_framework/repositories/processor/processor_repository.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"\nimport sys\nsys.path.insert(0, ''.'')\nfrom workflow_framework.repositories.processor.processor_repository import ProcessorRepository\nimport inspect\n\nrepo = ProcessorRepository()\nmethods = [name for name, method in inspect.getmembers(repo, predicate=inspect.iscoroutinefunction)]\nprint(''All async methods:'', methods)\nprint(''Has get_processors_by_node:'', ''get_processors_by_node'' in methods)\n\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"\nimport sys\nsys.path.insert(0, ''.'')\nimport importlib\nimport workflow_framework.repositories.processor.processor_repository as mod\nimportlib.reload(mod)\nfrom workflow_framework.repositories.processor.processor_repository import ProcessorRepository\n\nrepo = ProcessorRepository()\nprint(''Has get_processors_by_node:'', hasattr(repo, ''get_processors_by_node''))\nprint(''Method type:'', type(getattr(repo, ''get_processors_by_node'', None)))\n\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe test_processor_method.py)",
      "Bash(sed:*)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"\nimport sys\nsys.path.insert(0, ''.'')\nfrom workflow_framework.repositories.processor.processor_repository import ProcessorRepository\n\nrepo = ProcessorRepository()\nprint(''Has get_processors_by_node:'', hasattr(repo, ''get_processors_by_node''))\nprint(''Has get_node_processors:'', hasattr(repo, ''get_node_processors''))\n\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe processor_methods_fix.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"\nimport sys\nsys.path.insert(0, ''.'')\nfrom workflow_framework.repositories.processor.processor_repository import ProcessorRepository\n\nrepo = ProcessorRepository()\nprint(''Has get_processors_by_node:'', hasattr(repo, ''get_processors_by_node''))\nif hasattr(repo, ''get_processors_by_node''):\n    import inspect\n    sig = inspect.signature(repo.get_processors_by_node)\n    print(''Method signature:'', sig)\n\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"\nimport sys\nsys.path.insert(0, ''.'')\nfrom workflow_framework.repositories.processor.processor_repository import ProcessorRepository\n\nrepo = ProcessorRepository()\nprint(''Available methods:'', [m for m in dir(repo) if ''get_'' in m and not m.startswith(''_'')])\nprint(''Has get_node_processors:'', hasattr(repo, ''get_node_processors''))\n\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe check_task_schema.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"\nimport asyncio\nimport sys\nimport os\nsys.path.insert(0, os.getcwd())\nfrom workflow_framework.utils.database import db_manager\n\nasync def add_missing_field():\n    await db_manager.initialize()\n    await db_manager.execute(''ALTER TABLE task_instance ADD COLUMN IF NOT EXISTS workflow_instance_id UUID'')\n    print(''Added workflow_instance_id field to task_instance table'')\n    await db_manager.close()\n\nasyncio.run(add_missing_field())\n\")",
      "Bash(/mnt d/anaconda3/envs/fornew/python.exe simple_execution_test.py)",
      "Bash(\"/mnt/d/anaconda3/envs/fornew/python.exe\" simple_execution_test.py)",
      "Bash(\"/mnt/d/anaconda3/envs/fornew/python.exe\" check_task_schema.py)",
      "Bash(\"/mnt/d/anaconda3/envs/fornew/python.exe\" check_workflow_instance_schema.py)",
      "Bash(\"/mnt/d/anaconda3/envs/fornew/python.exe\" check_foreign_keys.py)",
      "Bash(\"/mnt/d/anaconda3/envs/fornew/python.exe\" check_node_methods.py)",
      "Bash(\"/mnt/d/anaconda3/envs/fornew/python.exe\" -m py_compile /mnt/d/HuaweiMoveData/Users/Dr.Tom_Great/Desktop/final/workflow_framework/repositories/node/node_repository.py)",
      "Bash(\"/mnt/d/anaconda3/envs/fornew/python.exe\" -c \"\nimport sys\nsys.path.insert(0, ''.'')\ntry:\n    from workflow_framework.repositories.node.node_repository import NodeRepository\n    print(''Import successful'')\n    repo = NodeRepository()\n    print(''NodeRepository instantiated'')\n    print(''Available methods:'')\n    for method in dir(repo):\n        if ''connection'' in method.lower():\n            print(f''  {method}'')\nexcept Exception as e:\n    print(f''Error: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(\"/mnt/d/anaconda3/envs/fornew/python.exe\" add_assigned_user_field.py)",
      "Bash(\"/mnt/d/anaconda3/envs/fornew/python.exe\" add_output_data_field.py)",
      "Bash(\"/mnt/d/anaconda3/envs/fornew/python.exe\" test_permanent_methods.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe test_processor_integration.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe simple_processor_test.py)",
      "Bash(cd /Users/chenshuchen/Desktop/final/frontend)",
      "Bash(npm run build)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python --version)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python -c \"import sys; print(''Python路径:'', sys.executable)\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe --version)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"import fastapi, uvicorn, asyncpg, pydantic; print(''✅ 主要依赖已安装'')\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"import fastapi, uvicorn, asyncpg, pydantic; print(''Main dependencies installed'')\")",
      "Bash(curl:*)",
      "Bash(timeout:*)",
      "Bash(node:*)",
      "Bash(npm:*)",
      "Bash(cat:*)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python -c \"import asyncpg; print(''asyncpg版本:'', asyncpg.__version__)\")",
      "Bash(pip3 install:*)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"import sys; print(''Python版本:'', sys.version)\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"\ntry:\n    import asyncpg\n    print(''✅ asyncpg已安装，版本:'', asyncpg.__version__)\nexcept ImportError:\n    print(''❌ asyncpg未安装'')\n    \ntry:\n    import psycopg2\n    print(''✅ psycopg2已安装，版本:'', psycopg2.__version__)\nexcept ImportError:\n    print(''❌ psycopg2未安装'')\n\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"\ntry:\n    import asyncpg\n    print(''asyncpg已安装，版本:'', asyncpg.__version__)\nexcept ImportError:\n    print(''asyncpg未安装'')\n    \ntry:\n    import psycopg2\n    print(''psycopg2已安装，版本:'', psycopg2.__version__)\nexcept ImportError:\n    print(''psycopg2未安装'')\n\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"\nimport asyncio\nimport asyncpg\nfrom workflow_framework.config import get_settings\n\nasync def test_db():\n    settings = get_settings()\n    print(''数据库配置:'')\n    print(''  主机:'', settings.database.host)\n    print(''  端口:'', settings.database.port)\n    print(''  数据库:'', settings.database.database)\n    print(''  用户:'', settings.database.username)\n    \n    try:\n        conn = await asyncpg.connect(\n            host=settings.database.host,\n            port=settings.database.port,\n            user=settings.database.username,\n            password=settings.database.password,\n            database=settings.database.database,\n            timeout=5\n        )\n        print(''数据库连接成功!'')\n        await conn.close()\n    except Exception as e:\n        print(''数据库连接失败:'', str(e))\n\nasyncio.run(test_db())\n\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"\nimport asyncio\nfrom workflow_framework.utils.database import db_manager\n\nasync def test_user_table():\n    try:\n        # 测试用户表查询\n        result = await db_manager.fetch_all(''SELECT * FROM \"\"user\"\" LIMIT 5'')\n        print(''用户表查询成功，记录数:'', len(result))\n        for user in result:\n            print(''用户:'', user.get(''username'', ''N/A''))\n    except Exception as e:\n        print(''用户表查询失败:'', str(e))\n        \n        # 检查表是否存在\n        try:\n            tables = await db_manager.fetch_all(\"\"\"\"\"\"\n                SELECT table_name FROM information_schema.tables \n                WHERE table_schema = ''public''\n            \"\"\"\"\"\")\n            print(''数据库中的表:'')\n            for table in tables:\n                print(''  -'', table[''table_name''])\n        except Exception as e2:\n            print(''无法查询表结构:'', str(e2))\n\nasyncio.run(test_user_table())\n\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"\ntry:\n    import aiohttp\n    print(''aiohttp已安装'')\nexcept ImportError:\n    print(''需要安装aiohttp'')\n\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe test_api_simple.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"\nimport asyncio\nfrom workflow_framework.config import get_settings\n\nasync def check_db_settings():\n    settings = get_settings()\n    print(''当前数据库配置:'')\n    print(f''  主机: {settings.database.host}'')\n    print(f''  端口: {settings.database.port}'')  \n    print(f''  数据库: {settings.database.database}'')\n    print(f''  用户: {settings.database.username}'')\n    print(f''  密码: {\"\"有\"\" if settings.database.password else \"\"无\"\"}'')\n\nasyncio.run(check_db_settings())\n\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/bin/python -c \"\nimport sys\nsys.path.append(''.'')\nfrom workflow_framework.api.processor import router\nprint(''Processor API路由已导入成功'')\nprint(''可用路由:'')\nfor route in router.routes:\n    print(f''  {route.methods} {route.path}'')\n\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python -c \"\nimport sys\nsys.path.append(''.'')\nfrom workflow_framework.api.processor import router\nprint(''Processor API路由已导入成功'')\nprint(''可用路由:'')\nfor route in router.routes:\n    print(f''  {route.methods} {route.path}'')\n\")",
      "Bash(\"/mnt/d/anaconda3/envs/fornew/python.exe\" -c \"\nimport sys\nsys.path.append(''.'')\ntry:\n    from workflow_framework.api.processor import router\n    print(''Processor路由导入成功'')\n    print(''路由数量:'', len(router.routes))\n    for route in router.routes:\n        print(f''  {route.methods} {route.path} - {route.name}'')\nexcept Exception as e:\n    print(''导入失败:'', e)\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(\"/mnt/d/anaconda3/envs/fornew/python.exe\" -c \"\nimport asyncio\nimport sys\nsys.path.append(''.'')\n\nasync def test_user_repo():\n    try:\n        from workflow_framework.repositories.user.user_repository import UserRepository\n        from workflow_framework.utils.database import initialize_database\n        \n        print(''初始化数据库连接...'')\n        await initialize_database()\n        \n        print(''创建用户仓库实例...'')\n        user_repo = UserRepository()\n        \n        print(''获取活跃用户...'')\n        users = await user_repo.get_all_active_users()\n        print(f''找到 {len(users)} 个用户'')\n        \n        for user in users[:2]:  # 只显示前2个用户\n            print(f''  用户: {user.get(\"\"username\"\", \"\"Unknown\"\")} - {user.get(\"\"email\"\", \"\"Unknown\"\")}'')\n            \n    except Exception as e:\n        print(f''错误: {e}'')\n        import traceback\n        traceback.print_exc()\n\nasyncio.run(test_user_repo())\n\")",
      "Bash(\"/mnt/d/anaconda3/envs/fornew/python.exe\" -c \"\nimport sys\nsys.path.append(''.'')\n\n# 检查路由定义\nprint(''=== 检查路由定义 ==='')\nfrom workflow_framework.api.processor import router\nfor route in router.routes:\n    if ''POST'' in route.methods:\n        print(f''POST路由: {route.path} - {route.name}'')\n\n# 检查main.py中的路由注册\nprint(''\\n=== 检查main.py路由注册 ==='')\ntry:\n    from main import app\n    all_routes = []\n    for route in app.routes:\n        if hasattr(route, ''methods'') and hasattr(route, ''path''):\n            if ''POST'' in route.methods and ''processors'' in route.path:\n                all_routes.append(f''{route.methods} {route.path}'')\n    \n    if all_routes:\n        print(''找到POST processors路由:'')\n        for route in all_routes:\n            print(f''  {route}'')\n    else:\n        print(''未找到POST processors路由在main app中'')\n        \n    # 显示所有processors相关路由\n    print(''\\n=== 所有processors相关路由 ==='')\n    processor_routes = []\n    for route in app.routes:\n        if hasattr(route, ''path'') and ''processors'' in route.path:\n            methods = getattr(route, ''methods'', set())\n            processor_routes.append(f''{methods} {route.path}'')\n    \n    for route in processor_routes:\n        print(f''  {route}'')\n        \nexcept Exception as e:\n    print(f''检查main.py失败: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe -c \"\nimport asyncio\nimport sys\nsys.path.append(''.'')\n\nasync def test_processor_creation():\n    try:\n        from workflow_framework.repositories.processor.processor_repository import ProcessorRepository\n        from workflow_framework.models.processor import ProcessorCreate, ProcessorType\n        import uuid\n        \n        # 模拟数据库连接\n        from workflow_framework.utils.database import initialize_database\n        await initialize_database()\n        \n        repo = ProcessorRepository()\n        \n        # 测试创建处理器数据\n        test_data = ProcessorCreate(\n            name=''Test Processor'',\n            type=ProcessorType.HUMAN,\n            user_id=uuid.uuid4()  # 模拟用户ID\n        )\n        \n        print(''测试数据:'', test_data.model_dump())\n        \n        # 尝试创建处理器\n        result = await repo.create_processor(test_data)\n        print(''创建结果:'', result)\n        \n    except Exception as e:\n        print(f''测试错误: {e}'')\n        import traceback\n        print(''详细错误:'', traceback.format_exc())\n\n# 运行测试\nasyncio.run(test_processor_creation())\n\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/python.exe:*)",
      "Bash(/mnt/d/anaconda3/envs/fornew/bin/python -c \"\nimport asyncio\nimport asyncpg\nfrom workflow_framework.models.node import NodeUpdate\n\n# Test node update validation\ntry:\n    # Valid update data - similar to start/end nodes\n    update_data = NodeUpdate(\n        name=''1'',\n        task_description=None,\n        position_x=100,\n        position_y=100\n    )\n    print(''Start/End node update data validates successfully'')\n    print(f''Name: {update_data.name}'')\n    print(f''Description: {update_data.task_description}'')\n    print(f''Position: ({update_data.position_x}, {update_data.position_y})'')\n    \n    # Try processor-style data\n    processor_data = NodeUpdate(\n        name=''hhh'',\n        task_description=''Some description'',\n        position_x=200,\n        position_y=200\n    )\n    print(''\\nProcessor node update data validates successfully'')\n    print(f''Name: {processor_data.name}'')\n    print(f''Description: {processor_data.task_description}'')\n    print(f''Position: ({processor_data.position_x}, {processor_data.position_y})'')\n    \nexcept Exception as e:\n    print(f''Validation error: {e}'')\n\")",
      "Bash(/mnt/d/anaconda3/envs/fornew/bin/python check_server_routes.py)",
      "Bash(\"/mnt/d/anaconda3/envs/fornew/python.exe\" check_server_routes.py)",
      "Bash(\"/mnt/d/anaconda3/envs/fornew/python.exe\" live_debug.py)",
      "Bash(/mnt/d/anaconda3/envs/fornew/bin/python test_execution_fix.py)",
      "Bash(rg:*)",
      "Bash(/mnt/d/anaconda3/envs/fornew/bin/python test_node_api.py)",
      "Bash(pgrep:*)",
      "Bash(/mnt/d/anaconda3/envs/fornew/bin/python test_processor_update.py)",
      "Bash(\"/mnt/d/anaconda3/envs/fornew/python.exe\" test_delayed_task_creation.py)",
      "Bash(\"/mnt/d/anaconda3/envs/fornew/python.exe\" check_node_schema.py)"
    ],
    "deny": []
  }
}